<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Windows.UI.Interactivity</name>
    </assembly>
    <members>
        <member name="T:Windows.UI.Interactivity.AttachableCollection`1">
            <summary>
            Implements a collection of attachable objects that can be attached to a DependencyObject
            </summary>
            <typeparam name="T">The type of elements</typeparam>
        </member>
        <member name="T:Windows.UI.Interactivity.FrameworkElementCollection`1">
            <summary>
            Implements a collection of dependency objects
            </summary>
            <typeparam name="T">Type of the DependencyObject contained</typeparam>
        </member>
        <member name="F:Windows.UI.Interactivity.FrameworkElementCollection`1.items">
            <summary>
            Hosts the collection
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.#ctor">
            <summary>
            Initializes the DependencyObjectCollection class
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.Add(`0)">
            <summary>
            Add an item to the collection
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.Contains(`0)">
            <summary>
            Verifies if the collection contains the instance of an element
            </summary>
            <param name="item">Element to check</param>
            <returns>true if the element is contained in the collection, otherwise false</returns>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies an array to this instance
            </summary>
            <param name="array">Array to copy from</param>
            <param name="arrayIndex">Index to start from</param>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.Remove(`0)">
            <summary>
            Removes an instance from the collection
            </summary>
            <param name="item">Instance of the item to remove</param>
            <returns>True if the item was successfully removed, otherwise false</returns>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.GetEnumerator">
            <summary>
            Retrieve an enumerator for this collection
            </summary>
            <returns>Instance of the enumerator</returns>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieve an enumerator for this collection
            </summary>
            <returns>Instance of the enumerator</returns>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.IndexOf(`0)">
            <summary>
            Returns the position of an element in the collection
            </summary>
            <param name="item">Item to search for</param>
            <returns>Index of the position where the item is found</returns>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inster an item into the collection
            </summary>
            <param name="index">index of the position to insert the item</param>
            <param name="item">item to insert</param>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified position
            </summary>
            <param name="index">Index of the item to be removed</param>
        </member>
        <member name="P:Windows.UI.Interactivity.FrameworkElementCollection`1.Count">
            <summary>
            Number of items in the collection
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.FrameworkElementCollection`1.IsReadOnly">
            <summary>
            Returns true if this collection cannot be modified
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.FrameworkElementCollection`1.Item(System.Int32)">
            <summary>
            Retrieve an item at the given position
            </summary>
            <param name="index">Index of the item</param>
            <returns>Instance of the item from the collection</returns>
        </member>
        <member name="E:Windows.UI.Interactivity.FrameworkElementCollection`1.CollectionChanged">
            <summary>
            Notifies changes in the collection
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.IAttachedObject">
            <summary>
            An interface for an object that can be attached to another object.
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.IAttachedObject.Attach(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="frameworkElement">The object to attach to.</param>
        </member>
        <member name="M:Windows.UI.Interactivity.IAttachedObject.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
            <remarks>Represents the object the instance is attached to.</remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            Implemented by derived class notifies an item was added
            </summary>
            <param name="item">Item added</param>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            Implemented by derived class notifies an item was removed
            </summary>
            <param name="item">Item removed</param>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            Notifies a DependencyObject has been attached
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            Notifies a DependencyObject is detaching
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            Initializes the collection
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.Attach(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Attaches the specified FrameworkElement to the collection
            </summary>
            <param name="frameworkElement">FrameworkElement to attach</param>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.Detach">
            <summary>
            Detaches the currently associated DependencyObject
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.AttachableCollection`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles elements added to or removed from the collection
            </summary>
            <param name="sender">source of the event</param>
            <param name="e">arguments</param>
        </member>
        <member name="T:Windows.UI.Interactivity.Behavior">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object.
            
            </summary>
            
            <remarks>
            This is an infrastructure class. Behavior authors should derive from Behavior&lt;T&gt; instead of from this class.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.InteractivityBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Windows.UI.Interactivity.InteractivityBase"/> class.
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.InteractivityBase.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            
            </summary>
            
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.InteractivityBase.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            
            </summary>
            
            <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
        </member>
        <member name="P:Windows.UI.Interactivity.InteractivityBase.AssociatedObject">
            <summary>
            Gets the object to which this behavior is attached.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.InteractivityBase.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            
            </summary>
            
            <value>
            The associated object type constraint.
            </value>
        </member>
        <member name="M:Windows.UI.Interactivity.Behavior.Attach(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Attaches to the specified object.
            
            </summary>
            <param name="frameworkElement">The object to attach to.</param><exception cref="T:System.InvalidOperationException">The Behavior is already hosted on a different element.</exception><exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the Behavior type constraint.</exception>
        </member>
        <member name="M:Windows.UI.Interactivity.Behavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.BehaviorCollection">
            <summary>
            Represents a collection of behaviors with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.LoadableAttachableCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Windows.UI.Interactivity.LoadableAttachableCollection`1.savedReference">
            <summary>
            The saved weak reference to the associated object
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.LoadableAttachableCollection`1.AssociatedObjectLoaded(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Handles the Loaded event of the AssociatedObject control.
            This is used when a behavior or trigger is attached to an itemcontainer,
            which is virtualized and uses recycling.
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.LoadableAttachableCollection`1.AssociatedObjectUnloaded(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Handles the Unloaded event of the AssociatedObject control.
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.BehaviorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> class.
            
            </summary>
            
            <remarks>
            Internal, because this should not be inherited outside this assembly.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.BehaviorCollection.ItemAdded(Windows.UI.Interactivity.Behavior)">
            <summary>
            Called when a new item is added to the collection.
            
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Windows.UI.Interactivity.BehaviorCollection.ItemRemoved(Windows.UI.Interactivity.Behavior)">
            <summary>
            Called when an item is removed from the collection.
            
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="T:Windows.UI.Interactivity.Behavior`1">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object.
            
            </summary>
            <typeparam name="T">The type the <see cref="T:System.Windows.Interactivity.Behavior`1"/> can be attached to.</typeparam>
            <remarks>
            Behavior is the base class for providing attachable state and commands to an object.
                        	The types the Behavior can be attached to can be controlled by the generic parameter.
                        	Override OnAttached() and OnDetaching() methods to hook and unhook any necessary handlers
                        	from the AssociatedObject.
            
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.Behavior`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.Behavior`1"/> class.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Gets the object to which this <see cref="T:System.Windows.Interactivity.Behavior`1"/> is attached.
            
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.EventTrigger">
            <summary>
            A trigger that listens for a specified event on its source and fires when that event is fired.
            
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.EventTriggerBase`1">
            <summary>
            Represents a trigger that can listen to an element other than its AssociatedObject.
            
            </summary>
            <typeparam name="T">The type that this trigger can be associated with.</typeparam>
            <remarks>
            EventTriggerBase extends TriggerBase to add knowledge of another object than the one it is attached to.
                        	This allows a user to attach a Trigger/Action pair to one element and invoke the Action in response to a
                        	change in another object somewhere else. Override OnSourceChanged to hook or unhook handlers on the source
                        	element, and OnAttached/OnDetaching for the associated element. The type of the Source element can be
                        	constrained by the generic type parameter. If you need control over the type of the
                        	AssociatedObject, set a TypeConstraintAttribute on your derived type.
            
            </remarks>
        </member>
        <member name="T:Windows.UI.Interactivity.EventTriggerBase">
            <summary>
            Represents a trigger that can listen to an object other than its AssociatedObject.
            
            </summary>
            
            <remarks>
            This is an infrastructure class. Trigger authors should derive from EventTriggerBase&lt;T&gt; instead of this class.
            </remarks>
        </member>
        <member name="T:Windows.UI.Interactivity.TriggerBase">
            <summary>
            Represents an object that can invoke Actions conditionally.
            
            </summary>
            
            <remarks>
            This is an infrastructure class. Trigger authors should derive from Trigger&lt;T&gt; instead of this class.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            Invoke all actions associated with this trigger.
            
            </summary>
            
            <remarks>
            Derived classes should call this to fire the trigger.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerBase.Attach(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Attaches to the specified object.
            
            </summary>
            <param name="frameworkElement">The object to attach to.</param><exception cref="T:System.InvalidOperationException">Cannot host the same trigger on more than one object at a time.</exception><exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the trigger type constraint.</exception>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerBase.Detach">
            <summary>
            Detaches this instance from its associated object.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.TriggerBase.Actions">
            <summary>
            Gets the actions associated with this trigger.
            
            </summary>
            
            <value>
            The actions associated with this trigger.
            </value>
        </member>
        <member name="E:Windows.UI.Interactivity.TriggerBase.PreviewInvoke">
            <summary>
            Event handler for registering to PreviewInvoke.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            Specifies the name of the Event this EventTriggerBase is listening for.
            
            </summary>
            
            <returns/>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase.OnEvent(System.Object)">
            <summary>
            Called when the event associated with this EventTriggerBase is fired. By default, this will invoke all actions on the trigger.
            
            </summary>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            Override this to provide more granular control over when actions associated with this trigger will be invoked.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Object,System.Object)">
            <summary>
            Called when the source changes.
            
            </summary>
            <param name="oldSource">The old source.</param><param name="newSource">The new source.</param>
            <remarks>
            This function should be overridden in derived classes to hook functionality to and unhook functionality from the changing source objects.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            Called after the trigger is attached to an AssociatedObject.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            Called when the trigger is being detached from its AssociatedObject, but before it has actually occurred.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">Could not find eventName on the Target.</exception>
        </member>
        <member name="P:Windows.UI.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            
            </summary>
            
            <value>
            The associated object type constraint.
            </value>
            
            <remarks>
            Define a TypeConstraintAttribute on a derived type to constrain the types it may be attached to.
            </remarks>
        </member>
        <member name="P:Windows.UI.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            Gets the source type constraint.
            
            </summary>
            
            <value>
            The source type constraint.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.EventTriggerBase.SourceObject">
            <summary>
            Gets or sets the target object. If TargetObject is not set, the target will look for the object specified by TargetName. If an element referred to by TargetName cannot be found, the target will default to the AssociatedObject. This is a dependency property.
            
            </summary>
            
            <value>
            The target object.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.EventTriggerBase.SourceName">
            <summary>
            Gets or sets the name of the element this EventTriggerBase listens for as a source. If the name is not set or cannot be resolved, the AssociatedObject will be used.  This is a dependency property.
            
            </summary>
            
            <value>
            The name of the source element.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.EventTriggerBase.Source">
            <summary>
            Gets the resolved source. If <c ref="SourceName"/> is not set or cannot be resolved, defaults to AssociatedObject.
            
            </summary>
            
            <value>
            The resolved source object.
            </value>
            
            <remarks>
            In general, this property should be used in place of AssociatedObject in derived classes.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The element pointed to by <c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/> does not satisify the type constraint.</exception>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/> class.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            Called when the source property changes.
            
            </summary>
            
            <remarks>
            Override this to hook functionality to and unhook functionality from the specified source, rather than the AssociatedObject.
            </remarks>
            <param name="oldSource">The old source.</param><param name="newSource">The new source.</param>
        </member>
        <member name="P:Windows.UI.Interactivity.EventTriggerBase`1.Source">
            <summary>
            Gets the resolved source. If <c ref="SourceName"/> is not set or cannot be resolved, defaults to AssociatedObject.
            
            </summary>
            
            <value>
            The resolved source object.
            </value>
            
            <remarks>
            In general, this property should be used in place of AssociatedObject in derived classes.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTrigger"/> class.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTrigger"/> class.
            
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="P:Windows.UI.Interactivity.EventTrigger.EventName">
            <summary>
            Gets or sets the name of the event to listen for. This is a dependency property.
            
            </summary>
            
            <value>
            The name of the event.
            </value>
        </member>
        <member name="F:Windows.UI.Interactivity.FrameworkElementExtensions.InheritedDataContextProperty">
            <summary>
            Identifies the InheritedDataContext DependencyProperty.
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementExtensions.OnInheritedDataContextChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the InheritedDataContext DependencyProperty.
            </summary>
            <param name="d">Instance with property change.</param>
            <param name="e">Property change details.</param>
        </member>
        <member name="F:Windows.UI.Interactivity.FrameworkElementExtensions.DataContextChangedHandlerProperty">
            <summary>
            Identifies the DataContextChangedHandler DependencyProperty.
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementExtensions.AddDataContextChangedHandler(Windows.UI.Xaml.FrameworkElement,System.EventHandler)">
            <summary>
            Adds the data context changed handler.
            </summary>
            <param name="element">Element to which the handler is added</param>
            <param name="handler">The handler to add</param>
        </member>
        <member name="M:Windows.UI.Interactivity.FrameworkElementExtensions.RemoveDataContextChangedHandler(Windows.UI.Xaml.FrameworkElement,System.EventHandler)">
            <summary>
            Removes the data context changed handler.
            </summary>
            <param name="element">The element from which the handler has to be removed</param>
            <param name="handler">The handler to remove</param>
        </member>
        <member name="T:Windows.UI.Interactivity.Interaction">
            <summary>
            Static class that owns the Triggers and Behaviors attached properties. Handles propagation of AssociatedObject change notifications.
            
            </summary>
        </member>
        <member name="F:Windows.UI.Interactivity.Interaction.TriggersProperty">
            <summary>
            This property is used as the internal backing store for the public Triggers attached property.
            
            </summary>
        </member>
        <member name="F:Windows.UI.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            This property is used as the internal backing store for the public Behaviors attached property.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.Interaction.GetTriggers(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the TriggerCollection containing the triggers associated with the specified object.
            
            </summary>
            <param name="obj">The object from which to retrieve the triggers.</param>
            <returns>
            A TriggerCollection containing the triggers associated with the specified object.
            </returns>
        </member>
        <member name="M:Windows.UI.Interactivity.Interaction.GetBehaviors(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Gets the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> associated with a specified object.
            
            </summary>
            <param name="obj">The object from which to retrieve the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.</param>
            <returns>
            A <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> containing the behaviors associated with the specified object.
            </returns>
        </member>
        <member name="M:Windows.UI.Interactivity.Interaction.OnBehaviorsChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Cannot host the same BehaviorCollection on more than one object at a time.</exception>
        </member>
        <member name="M:Windows.UI.Interactivity.Interaction.OnTriggersChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Cannot host the same TriggerCollection on more than one object at a time.</exception>
        </member>
        <member name="M:Windows.UI.Interactivity.Interaction.IsElementLoaded(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            A helper function to take the place of FrameworkElement.IsLoaded, as this property is not available in Silverlight.
            
            </summary>
            <param name="element">The element of interest.</param>
            <returns>
            True if the element has been loaded; otherwise, False.
            </returns>
        </member>
        <member name="T:Windows.UI.Interactivity.InvokeCommandAction">
            <summary>
            Executes a specified ICommand when invoked.
            
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.TriggerAction`1">
            <summary>
            Represents an attachable object that encapsulates a unit of functionality.
            
            </summary>
            <typeparam name="T">The type to which this action can be attached.</typeparam>
        </member>
        <member name="T:Windows.UI.Interactivity.TriggerAction">
            <summary>
            Represents an attachable object that encapsulates a unit of functionality.
            
            </summary>
            
            <remarks>
            This is an infrastructure class. Action authors should derive from TriggerAction&lt;T&gt; instead of this class.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            Attempts to invoke the action.
            
            </summary>
            <param name="parameter">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            
            </summary>
            <param name="parameter">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerAction.Attach(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Attaches to the specified object.
            
            </summary>
            <param name="frameworkElement">The object to attach to.</param><exception cref="T:System.InvalidOperationException">Cannot host the same TriggerAction on more than one object at a time.</exception><exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the TriggerAction type constraint.</exception>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerAction.Detach">
            <summary>
            Detaches this instance from its associated object.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.TriggerAction.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this action will run when invoked. This is a dependency property.
            
            </summary>
            
            <value>
            <c>True</c> if this action will be run when invoked; otherwise, <c>False</c>.
            
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.TriggerAction.IsHosted">
            <summary>
            Gets or sets a value indicating whether this instance is attached.
            
            </summary>
            
            <value>
            <c>True</c> if this instance is attached; otherwise, <c>False</c>.
            </value>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> class.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            Gets the object to which this <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> is attached.
            
            </summary>
            
            <value>
            The associated object.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            
            </summary>
            
            <value>
            The associated object type constraint.
            </value>
        </member>
        <member name="M:Windows.UI.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            
            </summary>
            <param name="parameter">The parameter to the action. If the action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="P:Windows.UI.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            Gets or sets the name of the command this action should invoke.
            
            </summary>
            
            <value>
            The name of the command this action should invoke.
            </value>
            
            <remarks>
            This property will be superseded by the Command property if both are set.
            </remarks>
        </member>
        <member name="P:Windows.UI.Interactivity.InvokeCommandAction.Command">
            <summary>
            Gets or sets the command this action should invoke. This is a dependency property.
            
            </summary>
            
            <value>
            The command to execute.
            </value>
            
            <remarks>
            This property will take precedence over the CommandName property if both are set.
            </remarks>
        </member>
        <member name="P:Windows.UI.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Gets or sets the command parameter. This is a dependency property.
            
            </summary>
            
            <value>
            The command parameter.
            </value>
            
            <remarks>
            This is the value passed to ICommand.CanExecute and ICommand.Execute.
            </remarks>
        </member>
        <member name="T:Windows.UI.Interactivity.NameResolvedEventArgs">
            <summary>
            Provides data about which objects were affected when resolving a name change.
            
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.NameResolver">
            <summary>
            Helper class to handle the logic of resolving a TargetName into a Target element
                        based on the context provided by a host element.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.NameResolver.UpdateObjectFromName(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Attempts to update the resolved object from the name within the context of the namescope reference element.
            
            </summary>
            <param name="oldObject">The old resolved object.</param>
            <remarks>
            Resets the existing target and attempts to resolve the current TargetName from the
                        context of the current Host. If it cannot resolve from the context of the Host, it will
                        continue up the visual tree until it resolves. If it has not resolved it when it reaches
                        the root, it will set the Target to null and write a warning message to Debug output.
            
            </remarks>
        </member>
        <member name="P:Windows.UI.Interactivity.NameResolver.Name">
            <summary>
            Gets or sets the name of the element to attempt to resolve.
            
            </summary>
            
            <value>
            The name to attempt to resolve.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.NameResolver.Object">
            <summary>
            The resolved object. Will return the reference element if TargetName is null or empty, or if a resolve has not been attempted.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            Gets or sets the reference element from which to perform the name resolution.
            
            </summary>
            
            <value>
            The reference element.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            Gets or sets a value indicating whether the reference element load is pending.
            
            </summary>
            
            <value>
            <c>True</c> if [pending reference element load]; otherwise, <c>False</c>.
            
            </value>
            
            <remarks>
            If the Host has not been loaded, the name will not be resolved.
                        In that case, delay the resolution and track that fact with this property.
            
            </remarks>
        </member>
        <member name="E:Windows.UI.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            Occurs when the resolved element has changed.
            
            </summary>
        </member>
        <member name="T:Windows.UI.Interactivity.PreviewInvokeEventArgs">
            <summary>
            Argument passed to PreviewInvoke event. Assigning Cancelling to True will cancel the invoking of the trigger.
            
            </summary>
            
            <remarks>
            This is an infrastructure class. Behavior attached to a trigger base object can add its behavior as a listener to TriggerBase.PreviewInvoke.
            </remarks>
        </member>
        <member name="T:Windows.UI.Interactivity.TargetedTriggerAction">
            <summary>
            Represents an action that can be targeted to affect an object other than its AssociatedObject.
            
            </summary>
            
            <remarks>
            This is an infrastructure class. Action authors should derive from TargetedTriggerAction&lt;T&gt; instead of this class.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Object,System.Object)">
            <summary>
            Called when the target changes.
            
            </summary>
            <param name="oldTarget">The old target.</param><param name="newTarget">The new target.</param>
            <remarks>
            This function should be overriden in derived classes to hook and unhook functionality from the changing source objects.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.TargetedTriggerAction.TargetObject">
            <summary>
            Gets or sets the target object. If TargetObject is not set, the target will look for the object specified by TargetName. If an element referred to by TargetName cannot be found, the target will default to the AssociatedObject. This is a dependency property.
            
            </summary>
            
            <value>
            The target object.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            Gets or sets the name of the object this action targets. If Target is set, this property is ignored. If Target is not set and TargetName is not set or cannot be resolved, the target will default to the AssociatedObject. This is a dependency property.
            
            </summary>
            
            <value>
            The name of the target object.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.TargetedTriggerAction.Target">
            <summary>
            Gets the target object. If TargetObject is set, returns TargetObject. Else, if TargetName is not set or cannot be resolved, defaults to the AssociatedObject.
            
            </summary>
            
            <value>
            The target object.
            </value>
            
            <remarks>
            In general, this property should be used in place of AssociatedObject in derived classes.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The Target element does not satisfy the type constraint.</exception>
        </member>
        <member name="P:Windows.UI.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            
            </summary>
            
            <value>
            The associated object type constraint.
            </value>
            
            <remarks>
            Define a TypeConstraintAttribute on a derived type to constrain the types it may be attached to.
            </remarks>
        </member>
        <member name="P:Windows.UI.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            Gets the target type constraint.
            
            </summary>
            
            <value>
            The target type constraint.
            </value>
        </member>
        <member name="T:Windows.UI.Interactivity.TargetedTriggerAction`1">
            <summary>
            Represents an action that can be targeted to affect an object other than its AssociatedObject.
            
            </summary>
            <typeparam name="T">The type constraint on the target.</typeparam>
            <remarks>
            TargetedTriggerAction extends TriggerAction to add knowledge of another element than the one it is attached to.
                        	This allows a user to invoke the action on an element other than the one it is attached to in response to a
                        	trigger firing. Override OnTargetChanged to hook or unhook handlers on the target element, and OnAttached/OnDetaching
                        	for the associated element. The type of the Target element can be constrained by the generic type parameter. If
                        	you need control over the type of the AssociatedObject, set a TypeConstraintAttribute on your derived type.
            
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/> class.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            Called when the target property changes.
            
            </summary>
            
            <remarks>
            Override this to hook and unhook functionality on the specified Target, rather than the AssociatedObject.
            </remarks>
            <param name="oldTarget">The old target.</param><param name="newTarget">The new target.</param>
        </member>
        <member name="P:Windows.UI.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            Gets the target object. If TargetName is not set or cannot be resolved, defaults to the AssociatedObject.
            
            </summary>
            
            <value>
            The target.
            </value>
            
            <remarks>
            In general, this property should be used in place of AssociatedObject in derived classes.
            </remarks>
        </member>
        <member name="T:Windows.UI.Interactivity.TriggerActionCollection">
            <summary>
            Represents a collection of actions with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/> class.
            
            </summary>
            
            <remarks>
            Internal, because this should not be inherited outside this assembly.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerActionCollection.ItemAdded(Windows.UI.Interactivity.TriggerAction)">
            <summary>
            Called when a new item is added to the collection.
            
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerActionCollection.ItemRemoved(Windows.UI.Interactivity.TriggerAction)">
            <summary>
            Called when an item is removed from the collection.
            
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="T:Windows.UI.Interactivity.TriggerBase`1">
            <summary>
            Represents an object that can invoke actions conditionally.
            
            </summary>
            <typeparam name="T">The type to which this trigger can be attached.</typeparam>
            <remarks>
            TriggerBase is the base class for controlling actions. Override OnAttached() and
                        	OnDetaching() to hook and unhook handlers on the AssociatedObject. You may
                        	constrain the types that a derived TriggerBase may be attached to by specifying
                        	the generic parameter. Call InvokeActions() to fire all Actions associated with
                        	this TriggerBase.
            
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerBase`1"/> class.
            
            </summary>
        </member>
        <member name="P:Windows.UI.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            Gets the object to which the trigger is attached.
            
            </summary>
            
            <value>
            The associated object.
            </value>
        </member>
        <member name="P:Windows.UI.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            
            </summary>
            
            <value>
            The associated object type constraint.
            </value>
        </member>
        <member name="T:Windows.UI.Interactivity.TriggerCollection">
            <summary>
            Represents a collection of triggers with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerCollection"/> class.
            
            </summary>
            
            <remarks>
            Internal, because this should not be inherited outside this assembly.
            </remarks>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerCollection.ItemAdded(Windows.UI.Interactivity.TriggerBase)">
            <summary>
            Called when a new item is added to the collection.
            
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Windows.UI.Interactivity.TriggerCollection.ItemRemoved(Windows.UI.Interactivity.TriggerBase)">
            <summary>
            Called when an item is removed from the collection.
            
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="T:Windows.UI.Interactivity.TypeConstraintAttribute">
            <summary>
            Specifies type constraints on the AssociatedObject of TargetedTriggerAction and EventTriggerBase.
            
            </summary>
        </member>
        <member name="M:Windows.UI.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/> class.
            
            </summary>
            <param name="constraint">The constraint type.</param>
        </member>
        <member name="P:Windows.UI.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            Gets the constraint type.
            
            </summary>
            
            <value>
            The constraint type.
            </value>
        </member>
        <member name="T:Windows.UI.Interactivity.WeakLifetimeObserver">
            <summary>
            Fires off notifications about the specified object's lifetime events (Loaded and Unloaded), without keeping a hard reference to the target.
            </summary>
        </member>
    </members>
</doc>
